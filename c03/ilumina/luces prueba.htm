<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Objetos 3D en Three.js</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.7/dat.gui.min.js"></script>
  </head>
  <body>
    <div id="canvas-container"></div>
    <script>
      // Variables globales
      let scene, camera, renderer;
      let lights = {
        ambientLight: true,
        directionalLight: true,
        arribaLight: true
      };

      // Luces
      let ambientLight, directionalLight, arribaLight;

      // Figuras 3D
      let objects = [];

      // Interfaz de usuario
      const gui = new dat.GUI();

      // Función para actualizar el estado de las luces
      function updateLights() {
        ambientLight.visible = lights.ambientLight;
        directionalLight.visible = lights.directionalLight;
        arribaLight.visible = lights.arribaLight;
      }

      // Configurar la escena
      function init() {
        // Escena
        scene = new THREE.Scene();

        // Cámara
        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 5;

        // Renderizador
        renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.getElementById("canvas-container").appendChild(renderer.domElement);

        // Crear figuras 3D (diferentes geometrías y materiales)
        const geometries = [
          new THREE.BoxGeometry(1, 1, 1),
          new THREE.SphereGeometry(0.7, 32, 32),
          new THREE.CylinderGeometry(0.5, 0.5, 1, 32),
          new THREE.TorusGeometry(0.5, 0.2, 32, 64),
          new THREE.TorusKnotGeometry(0.5, 0.2, 64, 8),
          new THREE.IcosahedronGeometry(0.8, 0),
        ];

        for (let i = 0; i < 6; i++) {
          const material = new THREE.MeshPhongMaterial({ color: Math.random() * 0xffffff });
          const object = new THREE.Mesh(geometries[i], material);
          object.position.x = (i - 2) * 2;
          objects.push(object);
          scene.add(object);
        }

        // Luces
        ambientLight = new THREE.AmbientLight(0x404040); // Luz ambiental
        scene.add(ambientLight);

        directionalLight = new THREE.DirectionalLight(0xffffff);
        directionalLight.position.set(-1, 1, 1); // Posición en la esquina superior izquierda
        scene.add(directionalLight);

        arribaLight = new THREE.PointLight(0xffffff);
        arribaLight.position.set(0, 2, 0); // Posición arriba
        scene.add(arribaLight);

        // Añadir controles de luces a la interfaz
        gui.add(lights, 'ambientLight').name('Luz Ambiental').onChange(updateLights);
        gui.add(lights, 'directionalLight').name('Luz Direccional').onChange(updateLights);
        gui.add(lights, 'arribaLight').name('Luz Arriba').onChange(updateLights);
      }

      // Animación
      function animate() {
        requestAnimationFrame(animate);

        // Rotar todas las figuras
        for (const object of objects) {
          object.rotation.x += 0.01;
          object.rotation.y += 0.01;
        }

        renderer.render(scene, camera);
      }

      // Inicializar y comenzar la animación
      init();
      updateLights(); // Actualizar el estado inicial de las luces
      animate();
    </script>
  </body>
</html>


